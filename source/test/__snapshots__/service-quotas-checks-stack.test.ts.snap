// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ServiceQuotasChecksStack snapshot test 1`] = `
Object {
  "AWSTemplateFormatVersion": "2010-09-09",
  "Mappings": Object {
    "MetricsMap": Object {
      "Send-Data": Object {
        "SendAnonymousData": "Yes",
      },
    },
    "RefreshRate": Object {
      "CronSchedule": Object {
        "Default": "rate(5 minutes)",
      },
    },
    "SourceCode": Object {
      "General": Object {
        "KeyPrefix": "limit-monitor/v5.3.3",
        "S3Bucket": "solutions",
      },
    },
  },
  "Outputs": Object {
    "ServiceChecks": Object {
      "Description": "service limit checks monitored in the account",
      "Value": "vCPU",
    },
  },
  "Parameters": Object {
    "ThresholdPercentage": Object {
      "Default": 0.8,
      "Description": "This value is used to set the threshold for WARN messages. For example set this to 0.8 if the threshold percentage is 80%.",
      "Type": "Number",
    },
  },
  "Resources": Object {
    "LimitCheckSchedule": Object {
      "Properties": Object {
        "Description": "Limit Monitor Solution - Rule to perform limit checks",
        "ScheduleExpression": Object {
          "Fn::FindInMap": Array [
            "RefreshRate",
            "CronSchedule",
            "Default",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "LimitMonitorFunction",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "LimitCheckScheduleLambdaFunctionAwsEventsLambdaInvokePermission11533DD1E": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "LimitMonitorFunction",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "LimitCheckSchedule",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "LimitCheckScheduleLambdaFunctionServiceRole74B5A7C9": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LimitCheckScheduleLambdaFunctionServiceRoleDefaultPolicy757E0C96": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W11",
              "reason": "The actions servicequotas:GetServiceQuota, cloudwatch:GetMetricsData, events:PutEvents REQUIRE * resource.",
            },
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "servicequotas:GetServiceQuota",
                "servicequotas:GetAWSDefaultServiceQuota",
                "servicequotas:ListServiceQuotas",
                "cloudwatch:GetMetricData",
                "events:PutEvents",
                "ec2:DescribeRegions",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:/aws/lambda/*",
                  ],
                ],
              },
              "Sid": "default",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LimitCheckScheduleLambdaFunctionServiceRoleDefaultPolicy757E0C96",
        "Roles": Array [
          Object {
            "Ref": "LimitCheckScheduleLambdaFunctionServiceRole74B5A7C9",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LimitMonitorFunction": Object {
      "DependsOn": Array [
        "LimitCheckScheduleLambdaFunctionServiceRoleDefaultPolicy757E0C96",
        "LimitCheckScheduleLambdaFunctionServiceRole74B5A7C9",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W89",
              "reason": "Not a valid use case to deploy in VPC",
            },
            Object {
              "id": "W92",
              "reason": "ReservedConcurrentExecutions not needed",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Join": Array [
              "-",
              Array [
                Object {
                  "Fn::FindInMap": Array [
                    "SourceCode",
                    "General",
                    "S3Bucket",
                  ],
                },
                Object {
                  "Ref": "AWS::Region",
                },
              ],
            ],
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "/",
              Array [
                Object {
                  "Fn::FindInMap": Array [
                    "SourceCode",
                    "General",
                    "KeyPrefix",
                  ],
                },
                "service-quotas-checks-service.zip",
              ],
            ],
          },
        },
        "Description": "This function checks for vCPU limits and sends notifiction on WARN and ERROR status",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "LIMIT_THRESHOLD": Object {
              "Ref": "ThresholdPercentage",
            },
            "LOG_LEVEL": "INFO",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "LimitCheckScheduleLambdaFunctionServiceRole74B5A7C9",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
  },
}
`;
